name: "AWS Terraform Deploy"
description: "init, plan, and deploy terraform"
inputs:
  AWS_ACCESS_KEY_ID:
    description: "AWS_ACCESS_KEY_ID to deploy the resources"
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: "AWS_SECRET_ACCESS_KEY to deploy the resources"
    required: true
  runApply:
    description: "Set to true to apply terraform changes"
    required: true
  workingDirectory:
    description: "Working directory with the main tf file"
    required: true
  environment:
    description: "Environment to deploy the resources"
    required: true
  region:
    description: "Region to deploy the cluster"
    required: true

runs:
  using: "composite"
  steps:
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup OpenTofu (Terraform)
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: 1.8.1

    - name: Setup Terraform variables
      shell: bash
      working-directory: ${{ inputs.workingDirectory }}
      id: vars
      run: |-
        cat ../environment_variables/${{ inputs.environment }}/${{ inputs.region }}/variables.tfvars > env.auto.tfvars

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ${{ inputs.workingDirectory }}
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY}}
      run: tofu init -backend-config="backend_config/${{ inputs.environment }}/${{ inputs.region }}/config.tfbackend" --reconfigure

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ${{ inputs.workingDirectory }}
      shell: bash
      run: tofu fmt -check -recursive

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: ${{ inputs.runApply != 'true'}}
      working-directory: ${{ inputs.workingDirectory }}
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY}}
      run: tofu plan

    # Generates an execution plan for Terraform and applies it
    - name: Terraform Apply
      if: ${{ inputs.runApply == 'true'}}
      working-directory: ${{ inputs.workingDirectory }}
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY}}
      run: tofu apply -auto-approve